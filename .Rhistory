library(ChIPanalyser)
sessionInfo()
#Load data
data(ChIPanalyserData)
library(ChIPanalyser)
#Load data
data(ChIPanalyserData)
#library(BSgenome.Dmelanogaster.UCSC.dm3)
#library(BSgenome)
#library(RcppRoll)
#library(GenomicRanges)
#setwd("/home/patrickmartin/PhD/TFbinding/ChIPanalyser/R/")
#files <- dir()
#for (i in files) source(i)
# Loading DNASequenceSet from BSgenome object
if(!require("BSgenome.Dmelanogaster.UCSC.dm3", character.only = TRUE)){
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Dmelanogaster.UCSC.dm3")
}
library(BSgenome.Dmelanogaster.UCSC.dm3)
DNASequenceSet <-getSeq(BSgenome.Dmelanogaster.UCSC.dm3)
#load("~/PhD/TFbinding/ChIPanalyser/data/ChIPanalyserData.rda")
#Loading Position Frequency Matrix
PFM <- file.path(system.file("extdata",package="ChIPanalyser"),"BCDSlx.pfm")
#Checking if correctly loaded
ls()
# Building a genomicProfileParameters objects for data
# storage and PWM computation
GPP <- genomicProfileParameters(PFM=PFM,PFMFormat="raw",
BPFrequency=DNASequenceSet,
ScalingFactorPWM = 1.5,
PWMThreshold = 0.7)
GPP
# Building occupancyProfileParameters with default values
OPP <- occupancyProfileParameters()
OPP
# Building occupancyProfileParameters with custom values
OPP <- occupancyProfileParameters(ploidy= 2,
boundMolecules= 1000,
chipMean = 200,
chipSd = 200,
chipSmooth = 250,
maxSignal = 1.847,
backgroundSignal = 0.02550997)
OPP
## Extracting ChIP score
eveLocusChip<-processingChIPseq(eveLocusChip,eveLocus,cores=1)
str(eveLocusChip)
eveLocusChip<-eveLocusChip[[1]]
names(eveLocusChip)<-"eve"
optimalParam <- computeOptimal(DNASequenceSet = DNASequenceSet,
genomicProfileParameters = GPP,
LocusProfile = eveLocusChip,
setSequence = eveLocus,
DNAAccessibility = Access,
occupancyProfileParameters = OPP,
parameter = "all",
peakMethod="moving_kernel",
cores=1)
optimalParam
genomeWide <- computeGenomeWidePWMScore(DNASequenceSet=DNASequenceSet,
genomicProfileParameters=GPP, DNAAccessibility = Access,cores=1)
genomeWide
SitesAboveThreshold <- computePWMScore(DNASequenceSet=DNASequenceSet,
genomicProfileParameters=genomeWide,
setSequence=eveLocus, DNAAccessibility = Access,cores=1)
SitesAboveThreshold
Occupancy <- computeOccupancy(SitesAboveThreshold,
occupancyProfileParameters= OPP)
Occupancy
chipProfile <- computeChipProfile(setSequence = eveLocus,
occupancy = Occupancy,occupancyProfileParameters = OPP,
method="moving_kernel")
chipProfile
AccuracyEstimate <- profileAccuracyEstimate(LocusProfile = eveLocusChip,
predictedProfile = chipProfile, occupancyProfileParameters = OPP)
AccuracyEstimate
# Plotting Optimal heat maps
plotOptimalHeatMaps(optimalParam, parameter="all")
# Plotting occupancy Profile
##
plotOccupancyProfile(predictedProfile=chipProfile[[1]][[1]],
setSequence=eveLocus,
chipProfile = eveLocusChip[[1]],
DNAAccessibility = Access,
occupancy = AllSitesAboveThreshold(Occupancy)[[1]][[1]],
occupancyProfileParameters = OPP,
geneRef =geneRef)
geneRef
strand(geneRef)
ls()
genes <- geneRef[queryHits(findOverlaps(geneRef, eveLocus))]
genes
start(genes) <- pmax(start(genes), start(setSequence))
end(genes) <- pmin(end(genes), end(setSequence))
geneRefColour<-heat.colors(length(unique(genes$type)))
names(geneRefColour)<-unique(genes$type)
start(genes) <- pmax(start(genes), start(eveLocus))
end(genes) <- pmin(end(genes), end(eveLocus))
geneRefColour<-heat.colors(length(unique(genes$type)))
names(geneRefColour)<-unique(genes$type)
geneRefColour
genes
elementBuffer<-split(genes,genes$type)
elementBuffer
lapply(elementBuffer,strand)
type=1
which(strand(elementBuffer[[type]])=="+" | strand(elementBuffer[[type]])=="*" & strand(elementBuffer[[type]])!="-")
type=2
which(strand(elementBuffer[[type]])=="+" | strand(elementBuffer[[type]])=="*" & strand(elementBuffer[[type]])!="-")
type=3
which(strand(elementBuffer[[type]])=="+" | strand(elementBuffer[[type]])=="*" & strand(elementBuffer[[type]])!="-")
type=4
which(strand(elementBuffer[[type]])=="+" | strand(elementBuffer[[type]])=="*" & strand(elementBuffer[[type]])!="-")
neg<-which(strand(elementBuffer[[type]])=="-" | strand(elementBuffer[[type]])=="*" & strand(elementBuffer[[type]])!="+")
type=1
neg<-which(strand(elementBuffer[[type]])=="-" | strand(elementBuffer[[type]])=="*" & strand(elementBuffer[[type]])!="+")
type=2
neg<-which(strand(elementBuffer[[type]])=="-" | strand(elementBuffer[[type]])=="*" & strand(elementBuffer[[type]])!="+")
type=3
neg<-which(strand(elementBuffer[[type]])=="-" | strand(elementBuffer[[type]])=="*" & strand(elementBuffer[[type]])!="+")
names(elementBuffer)[type]=="intron"
type
names(elementBuffer)
type=2
length(grep(x=names(elementBuffer)[type],pattern="UTR",ignore.case=TRUE))>0
type=3
length(grep(x=names(elementBuffer)[type],pattern="UTR",ignore.case=TRUE))>0
# Plotting occupancy Profile
##
geneRef
plotOccupancyProfile(predictedProfile=chipProfile[[1]][[1]],
setSequence=eveLocus,
chipProfile = eveLocusChip[[1]],
DNAAccessibility = Access,
occupancy = AllSitesAboveThreshold(Occupancy)[[1]][[1]],
occupancyProfileParameters = OPP,
geneRef =geneRef)
data()
data(women)
women
rm(women)
data(rivers)
rivers
ls()
rm(rivers)
data(mtcars)
mtcars
install.packages("ggplot2")
library(ggplot2)
mtcars
ggplot(mtcars, aes(mpg)) + geom_histogram()
hist(mtcars[,1])
hist(mtcars[,1],breaks = 30)
getwd()
qplot(itis)
qplot(iris)
gplot(iris)
ggplot(iris)
ChickWeight
ggplot(ChickWeight,aes(x=diet,y=weight))+geom_boxplot()
ggplot(ChickWeight,aes(x=Diet,y=weight))+geom_boxplot()
ggplot(ChickWeight,aes(x=Time,y=weight))+geom_lines()
ggplot(ChickWeight,aes(x=Time,y=weight))+geom_line()
ggplot(ChickWeight,aes(x=Time,y=weight))+geom_line(aes(y=Chicks))
ggplot(ChickWeight,aes(x=Time,y=weight))+geom_line(aes(y=Chick))
ggplot(ChickWeight,aes(x=Time,y=weight))+geom_point(aes(y=Chick))
unique(ChickWeight[,"Chick"])
data("midwest",package = "ggplot2")
midwest
class(midwest)
midwest[1,2]
midwest[,2]
midwest[,5]
midwest[50:75,5]
class(midwest[50:75,5])
g<-ggplot(midwest,aes(x=area,y=poptotal))
g
ggplot(midwest,aes(x=state,y= poptotal, col=state))+geom_bar()
ggplot(midwest,aes(x=state,y= poptotal))+geom_bar()
ggplot(midwest,aes(x=state,y=poptotal))+geom_bar()
midwest
ggplot(midwest,aes(x=state,y=poptotal))+geom_boxplot()
setwd("~/PhD/TFbinding/Dev/")
dir()
dir()
install.packages("ChIPanalyser_1.3.4.tar.gz", repos=NULL)
library(ChIPanalyser)
library(ChIPanalyser)
#Load data
data(ChIPanalyserData)
# Loading DNASequenceSet from BSgenome object
if(!require("BSgenome.Dmelanogaster.UCSC.dm3", character.only = TRUE)){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("BSgenome.Dmelanogaster.UCSC.dm3")
}
library(BSgenome.Dmelanogaster.UCSC.dm3)
DNASequenceSet <-getSeq(BSgenome.Dmelanogaster.UCSC.dm3)
#Loading Position Frequency Matrix
PFM <- file.path(system.file("extdata",package="ChIPanalyser"),"BCDSlx.pfm")
#Checking if correctly loaded
ls()
# Building a genomicProfileParameters objects for data
# storage and PWM computation
GPP <- genomicProfileParameters(PFM=PFM,PFMFormat="raw",
BPFrequency=DNASequenceSet,
ScalingFactorPWM = 1.5,
PWMThreshold = 0.7)
GPP
# Building occupancyProfileParameters with default values
OPP <- occupancyProfileParameters()
OPP
# Building occupancyProfileParameters with custom values
OPP <- occupancyProfileParameters(ploidy= 2,
boundMolecules= 1000,
chipMean = 200,
chipSd = 200,
chipSmooth = 250,
maxSignal = 1.847,
backgroundSignal = 0.02550997)
OPP
## Extracting ChIP score
eveLocusChip<-processingChIPseq(eveLocusChip,eveLocus,noiseFilter="zero",cores=1)
str(eveLocusChip)
### Extracting occupancy profile parameters object built from ChIP data
OPP<-eveLocusChip[[2]]
eveLocusChip<-eveLocusChip[[1]]
ScalingFactorPWM(genomicProfileParameters) <- c(0.25, 0.5, 0.75, 1, 1.25,
1.5, 1.75, 2, 2.5, 3, 3.5 ,4 ,4.5, 5)
library(ChIPanalyser)
#Load data
data(ChIPanalyserData)
# Loading DNASequenceSet from BSgenome object
library(BSgenome.Dmelanogaster.UCSC.dm3)
DNASequenceSet <-getSeq(BSgenome.Dmelanogaster.UCSC.dm3)
#Loading Position Frequency Matrix
PFM <- file.path(system.file("extdata",package="ChIPanalyser"),"BCDSlx.pfm")
#Checking if correctly loaded
ls()
eveLocus
# Building a genomicProfileParameters objects for data
# storage and PWM computation
GPP <- genomicProfileParameters(PFM=PFM,PFMFormat="raw",
BPFrequency=DNASequenceSet,
ScalingFactorPWM = 1.5,
PWMThreshold = 0.7)
GPP
# Building occupancyProfileParameters with default values
OPP <- occupancyProfileParameters()
OPP
# Building occupancyProfileParameters with custom values
OPP <- occupancyProfileParameters(ploidy= 2,
boundMolecules= 1000,
chipMean = 200,
chipSd = 200,
chipSmooth = 250,
maxSignal = 1.847,
backgroundSignal = 0.02550997)
OPP
## Extracting ChIP score
eveLocusChip<-processingChIPseq(eveLocusChip,eveLocus,noiseFilter="zero",cores=1)
str(eveLocusChip)
### Extracting occupancy profile parameters object built from ChIP data
OPP<-eveLocusChip[[2]]
eveLocusChip<-eveLocusChip[[1]]
ScalingFactorPWM(genomicProfileParameters) <- c(0.25, 0.5, 0.75, 1, 1.25,
1.5, 1.75, 2, 2.5, 3, 3.5 ,4 ,4.5, 5)
sessionInfo()
install.packages("ChIPanalyser_1.3.4.tar.gz",repos=NULL)
library(ChIPanalyser)
#Load data
data(ChIPanalyserData)
# Loading DNASequenceSet from BSgenome object
library(BSgenome.Dmelanogaster.UCSC.dm3)
DNASequenceSet <-getSeq(BSgenome.Dmelanogaster.UCSC.dm3)
#Loading Position Frequency Matrix
PFM <- file.path(system.file("extdata",package="ChIPanalyser"),"BCDSlx.pfm")
#Checking if correctly loaded
ls()
# Building a genomicProfileParameters objects for data
# storage and PWM computation
GPP <- genomicProfileParameters(PFM=PFM,PFMFormat="raw",
BPFrequency=DNASequenceSet,
ScalingFactorPWM = 1.5,
PWMThreshold = 0.7)
GPP
# Building occupancyProfileParameters with default values
OPP <- occupancyProfileParameters()
OPP
# Building occupancyProfileParameters with custom values
OPP <- occupancyProfileParameters(ploidy= 2,
boundMolecules= 1000,
chipMean = 200,
chipSd = 200,
chipSmooth = 250,
maxSignal = 1.847,
backgroundSignal = 0.02550997)
OPP
## Extracting ChIP score
eveLocusChip<-processingChIPseq(eveLocusChip,eveLocus,noiseFilter="zero",cores=1)
str(eveLocusChip)
### Extracting occupancy profile parameters object built from ChIP data
OPP<-eveLocusChip[[2]]
eveLocusChip<-eveLocusChip[[1]]
ScalingFactorPWM(genomicProfileParameters) <- c(0.25, 0.5, 0.75, 1, 1.25,
1.5, 1.75, 2, 2.5, 3, 3.5 ,4 ,4.5, 5)
ScalingFactorPWM(genomicProfileParameters)
optimalParam <- suppressWarnings(computeOptimal(DNASequenceSet = DNASequenceSet,
genomicProfileParameters = GPP,
LocusProfile = eveLocusChip,
setSequence = eveLocus,
DNAAccessibility = Access,
occupancyProfileParameters = OPP,
optimalMethod = "all",
peakMethod="moving_kernel",
cores=1))
traceback()
class(Access)
class(eveLocus)
