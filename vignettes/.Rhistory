ScalingFactorPWM(genomicProfileParameters) <- c(0.25, 0.5, 0.75, 1, 1.25,
1.5, 1.75, 2, 2.5, 3, 3.5 ,4 ,4.5, 5)
library(ChIPanalyser)
#Load data
data(ChIPanalyserData)
# Loading DNASequenceSet from BSgenome object
library(BSgenome.Dmelanogaster.UCSC.dm3)
DNASequenceSet <-getSeq(BSgenome.Dmelanogaster.UCSC.dm3)
#Loading Position Frequency Matrix
PFM <- file.path(system.file("extdata",package="ChIPanalyser"),"BCDSlx.pfm")
#Checking if correctly loaded
ls()
# Building a genomicProfileParameters objects for data
# storage and PWM computation
GPP <- genomicProfileParameters(PFM=PFM,PFMFormat="raw",
BPFrequency=DNASequenceSet,
ScalingFactorPWM = 1.5,
PWMThreshold = 0.7)
GPP
# Building occupancyProfileParameters with default values
OPP <- occupancyProfileParameters()
OPP
# Building occupancyProfileParameters with custom values
OPP <- occupancyProfileParameters(ploidy= 2,
boundMolecules= 1000,
chipMean = 200,
chipSd = 200,
chipSmooth = 250,
maxSignal = 1.847,
backgroundSignal = 0.02550997)
OPP
## Extracting ChIP score
eveLocusChip<-processingChIPseq(eveLocusChip,eveLocus,noiseFilter="zero",cores=1)
str(eveLocusChip)
### Extracting occupancy profile parameters object built from ChIP data
OPP<-eveLocusChip[[2]]
eveLocusChip<-eveLocusChip[[1]]
ScalingFactorPWM(genomicProfileParameters) <- c(0.25, 0.5, 0.75, 1, 1.25,
1.5, 1.75, 2, 2.5, 3, 3.5 ,4 ,4.5, 5)
optimalParam <- suppressWarnings(computeOptimal(DNASequenceSet = DNASequenceSet,
genomicProfileParameters = GPP,
LocusProfile = eveLocusChip,
setSequence = eveLocus,
DNAAccessibility = Access,
occupancyProfileParameters = OPP,
optimalMethod = "all",
peakMethod="moving_kernel",
cores=1))
str(optimalParam)
genomeWide <- computeGenomeWidePWMScore(DNASequenceSet=DNASequenceSet,
genomicProfileParameters=GPP, DNAAccessibility = Access,cores=1)
genomeWide
SitesAboveThreshold <- computePWMScore(DNASequenceSet=DNASequenceSet,
genomicProfileParameters=genomeWide,
setSequence=eveLocus, DNAAccessibility = Access,cores=1)
SitesAboveThreshold
Occupancy <- computeOccupancy(SitesAboveThreshold,
occupancyProfileParameters= OPP)
Occupancy
chipProfile <- computeChipProfile(setSequence = eveLocus,
occupancy = Occupancy,occupancyProfileParameters = OPP,
method="moving_kernel")
chipProfile
AccuracyEstimate <- profileAccuracyEstimate(LocusProfile = eveLocusChip,
predictedProfile = chipProfile, occupancyProfileParameters = OPP,method="all")
AccuracyEstimate <-AccuracyEstimate[[1]][[1]][[1]]
AccuracyEstimate
# Plotting Optimal heat maps
par(oma=c(0,0,3,0))
layout(matrix(1:8,ncol=4, byrow=T),width=c(6,1.5,6,1.5),height=c(1,1))
plotOptimalHeatMaps(optimalParam,layout=FALSE)
# Plotting occupancy Profile
##
plotOccupancyProfile(predictedProfile=chipProfile[[1]][[1]],
setSequence=eveLocus,
chipProfile = eveLocusChip[[1]],
DNAAccessibility = Access,
occupancy = AllSitesAboveThreshold(Occupancy)[[1]][[1]],
profileAccuracy=AccuracyEstimate,
occupancyProfileParameters = OPP,
geneRef=geneRef
)
sessionInfo()
# Plotting Optimal heat maps
par(oma=c(0,0,3,0))
layout(matrix(1:8,ncol=4, byrow=T),width=c(6,1.5,6,1.5),height=c(1,1))
plotOptimalHeatMaps(optimalParam,layout=FALSE)
optimalParam <- suppressWarnings(computeOptimal(DNASequenceSet = DNASequenceSet,
genomicProfileParameters = GPP,
LocusProfile = eveLocusChip,
setSequence = eveLocus,
DNAAccessibility = Access,
occupancyProfileParameters = OPP,
optimalMethod = "all",
peakMethod="moving_kernel",
cores=1))
